//css actual layout VI
@import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital@0,400;0,900;1,700&display=swap');

:root {
    --font-family: "Open Sans", sans-serif;
    --normal-font: 400;
    --bold-font: 700;
    --bolder-font: 900;
    --bg-color: #fcfcfc;
    --primary-color: #000000 ;
    --secondary-color: #b30000;
    --primary-shadow: #8b8eaf;
    --secondary-shadow: ;
    --bottom-margin: 0.5rem;
    --bottom-margin-2: 1rem;
    --line-height: 1.7rem;
    --transition: 0.3s;
}

html {
    scroll-behavior: smooth;
  }

*{
    box-sizing:border-box;
    margin: 0;
    padding: 0;
}

nav{
    position:sticky;
    top:0;
    left:0;
    z-index: 1;
    display:flex;
    align-items: center;
    justify-content: center;
}



  ul {
    display: block;
    margin: auto;
    width:75%;
    list-style-type: none;
    padding-left: 0;
  }
  
  a {
    text-decoration: none;
    color: var(--primary-color);
  }
  
  a:hover {
    color: var(--secondary-color);
    transition: all 0.3s ease;
  }
  
  body {
      display: flex;
      width:100vw;
      height:100vh;
    font-family: var(--font-family);
    background-image: linear-gradient(80deg, #3957bc, #9f4ab2,#dc3c92, #fc4966, #ff7235);
  }

.container{
    width: 100%;
}
  

.sidebar,.Input-class,.Output-class{
    display: flex;
    font-size:30px;
    font-weight: var(--normal-font);
    
    margin: 5px;
    bottom:5%;
    
    width:25%;
    height:30rem;
    
    background-color: rgba(255,255,255,0.4);
    border-radius: 5%;
    
    position:fixed;
    overflow:hidden;
    
    box-shadow:2px 2px 8px rgba(0,0,0);
    backdrop-filter: blur(5px);
}

.sidebar:hover,.Input-class:hover,.Output-class:hover {
    box-shadow:7px 10px 15px rgba(0,0,0);
    background-color: rgba(255,255,255,0.55);
    transition: all 0.5s ease;
    
}

.sidebar-link{
    display:block;
    padding: 15px;
    letter-spacing: 2px;
}
.sidebar-link:hover{
    font-size: 31px;
    letter-spacing: 4px;
    padding: 20px 0;
}

.sidebar-list{
    border-bottom: 2px solid black;
    text-align: center;
}

.Input-class{
    left: 30%; 
}

.Output-class{
    left: 60%;
}

.Input-div,.Output-div{
    margin: 25% 5%;
    text-align: center;
    padding: 20px;
    font-size:25px;
    font-weight: var(--normal-font);
    width: 75%;

}

input[type=text] {
    background-color: var(--bg-color);
    color: var(--primary-color);
    width: 75%;
    padding: 20px;
    padding-left: 20px;
    height: 10px;
    font-size: 25px;
    border-radius: 10px;
    box-shadow: inset 4px 4px 4px var(--primary-color);
  }

select{
    width: 250px;
    padding: 5px;
    font-size: 20px;
    box-shadow: inset 4px 4px 4px var(--primary-color);
    border-radius: 5%;
    padding-top: 8px;
}

select option:hover{
    background-color: lightgrey;
    padding-left: 5%;
}

.Length-data, .Volume-data, .Mass-data,.Temperature-data,.Time-data{
    display:block;
    position:absolute;
    margin: 50px;
    bottom: 50px;
}

.Length-data-2, .Volume-data-2, .Mass-data-2,.Temperature-data-2,.Time-data-2{
    display:block;
    position:absolute;
    margin: 50px;
    bottom: 50px;
}



//neomorphism ig
<div class="drops">
    <div class="drop drop-1"></div>
    <div class="drop drop-2"></div>
    <div class="drop drop-3"></div>
    <div class="drop drop-4"></div>
    <div class="drop drop-5"></div>
  </div>

.drop {
  background: $white;
  backdrop-filter: blur(10px);
  border-radius: 10px;
  border-left: 1px solid $white;
  border-top: 1px solid $white;
  box-shadow: 10px 10px 60px -8px rgba(0,0,0,0.2);
  position: absolute;
  transition: all 0.2s ease;
  
  &-1 {
    height: 80px;
    width: 80px;
    top: -20px;
    left: -40px;
    z-index: -1;
  }
  
  &-2 {
    height: 80px;
    width: 80px;
    bottom: -30px;
    right: -10px;
  }
  
  &-3 {
    height: 100px;
    width: 100px;
    bottom: 120px;
    right: -50px;
    z-index: -1;
  }
  
  &-4 {
    height: 120px;
    width: 120px;
    top: -60px;
    right: -60px;
  }
  
  &-5 {
    height: 60px;
    width: 60px;
    bottom: 170px;
    left: 90px;
    z-index: -1;
  }
}


html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}






/*
    // not done yet... now, b) use the targetFactor to convert FROM the base unit
    // to the target unit...
    
    // Again, handle Temperature increments!
    
 */ 
    // Ta-da! All that's left is to update the target input box:
    

/*
inputUnit[0] = new Array("Meter", "Kilometer", "Centimeter", "Millimeter", "Micrometer",
                        "Nanometer", "Decimeter", "Mile", "inch", "Yard", 
                        "Foot", "Light-Year", "Terameter", "Parsec", "Astronomical Unit",
                        "Nautical Mile", "Fermi");
*/

/*inputUnit[1]= new Array("Kilogram","Gram","Milligram","Ton","Pound",
                        "Ounce","Carat","AMU","Quarter","Qunital","Grain");
*/

                    /*
inputUnit[2]=new Array("Cubic Meter","Cubic Kilometer","Cubic Centimeter","Cubic Millimeter","Liter",
                        "Milli Liter","Gallon","Quart","Pint","Cup",
                        "Tablespoon","Teaspoon","Barrel");
*/
 
/*

function ConvertFromTo(sourceForm, targetForm) {
    // Converts the contents of the sourceForm input box to the units specified in the targetForm unit menu and puts the result in the targetForm input box.In other words, this is the heart of the whole script...
    var propIndex;
    var sourceIndex;
    var sourceFactor;
    var targetIndex;
    var targetFactor;
    var result;
  
    // Start by checking which property we are working in...
    propIndex = document.property_form.the_menu.selectedIndex;
  
    // Let's determine what unit are we converting FROM (i.e. source) and the factor needed to convert that unit to the base unit.
    sourceIndex = sourceForm.unit_menu.selectedIndex;
    sourceFactor = factor[propIndex][sourceIndex];
  
    // Cool! Let's do the same thing for the target unit - the units we are converting TO:
    targetIndex = targetForm.unit_menu.selectedIndex;
    targetFactor = factor[propIndex][targetIndex];
  
    // Simple, huh? let's do the math: a) convert the source TO the base unit: (The input has been checked by the CalculateUnit function).
  
    result = sourceForm.unit_input.value;
    // Handle Temperature increments!
    if (property[propIndex] == "Temperature") {
      result = parseFloat(result) + tempIncrement[sourceIndex];
    }
    result = result * sourceFactor;
  
    // not done yet... now, b) use the targetFactor to convert FROM the base unit
    // to the target unit...
    result = result / targetFactor;
    // Again, handle Temperature increments!
    if (property[propIndex] == "Temperature") {
      result = parseFloat(result) - tempIncrement[targetIndex];
    }
  
    // Ta-da! All that's left is to update the target input box:
    targetForm.unit_input.value = result;
  }


  // !!! Caution: Temperature requires an increment as well as a multiplying factor
// !!! and that's why it's handled differently
// !!! Be VERY careful in how you change this behavior
property[14] = "Temperature";
unit[14] = new Array("Degrees Celsius ('C)", "Degrees Fahrenheit ('F)", "Degrees Kelvin ('K)", "Degrees Rankine ('R)");
factor[14] = new Array(1, 0.555555555555, 1, 0.555555555555);
tempIncrement = new Array(0, -32, -273.15, -491.67);
  */

/*
for(let i=0;i<tabChangeArray.length;i+2){
    inputUnit[i]=new Array(tabChangeArray[i].options.selectedIndex.text);
    a=tabChangeArray[i].select;
    x=a.options.forEach((j)=>inputUnit[i]=new Array(a.options[j].text));
}
*/
 /*  var selectedInputValue=document.getElementsByClassName("Unit-1");
    var selectedOutputValue=document.getElementsByClassName("Unit-2");
    // Start by checking which property we are working in...
    propIndex = parseInt(presentUnitIndex/2);
    selectedInputValue=selectedInputValue[propIndex]
    selectedOutputValue=selectedOutputValue[propIndex]

    // Let's determine what unit are we converting FROM (i.e. source) and the factor needed to convert that unit to the base unit.
    sourceIndex = selectedInputValue.selectedIndex;*/



//take care of temperature and other source factors
//make website responsive



nav ul li {
	font-size: var(--bolder-font);
	
	background-color: white;
	border: 2px solid black;
	letter-spacing: 0.1em;
	width: 5em;
	height: 1.5em;
	line-height: 1.5em;
	position: relative;
	overflow: hidden;
	margin: 0.5em;
	cursor: pointer;
}

nav ul li::before {
	content: '';
	position: absolute;
	width: 1.5em;
	height: 100%;
	background-color: black;
	border-radius: 50%;
	top: 0;
	left: -0.75em;
	transition: 0.5s ease-out;
}

nav ul li:hover::before {
	transform: scale(7);
}

background-image: linear-gradient(80deg, #3957bc, #9f4ab2,#dc3c92, #fc4966, #ff7235);
    

glassmorphism:   

<div class="basic">
                <div class="blur"></div>
              </div>

.basic {
    width: 200px;
    height: 200px;
    background: rgba(255,255,255,0.4);
    position: relative;
  }
  .blur {
    position: absolute;
    bottom: 25px;
    right: 162px;
    width: 200px;
    height: 200px;
    background: rgba(255,255,255,0.4);
    
  }

  TIP 1: First you place all the CSS styling that "default"
   applies to all elements (by default I mean in fact from 
   0px screen width to infinitely wide) then I make the screen 
   as small as possible and then start, while I SLOWLY enlarge 
   it make, to discover where for me the design "breaks". And for 
   THOSE "breaking points" I make the CSS media queries with "alternative" 
   styling! You will find those media queries at the bottom of this CSS file! 




